// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module dual_faucet::fungible_asset_coin_dual_faucet_aggregate {
    use aptos_framework::coin::Coin;
    use aptos_framework::fungible_asset::FungibleAsset;
    use aptos_framework::object::{Self, Object};
    use dual_faucet::fungible_asset_coin_dual_faucet::{Self, FungibleAssetCoinDualFaucet};
    use dual_faucet::fungible_asset_coin_dual_faucet_create_logic;
    use dual_faucet::fungible_asset_coin_dual_faucet_drop_logic;
    use std::signer;

    public fun create<Y>(
        account: &signer,
        x_amount: FungibleAsset,
        y_amount: Coin<Y>,
    ): address {
        let account_address = signer::address_of(account);
        let constructor_ref = object::create_object(account_address);
        let object_signer = object::generate_signer(&constructor_ref);
        let extend_ref = object::generate_extend_ref(&constructor_ref);
        let delete_ref = object::generate_delete_ref(&constructor_ref);
        let transfer_ref = object::generate_transfer_ref(&constructor_ref);
        object::disable_ungated_transfer(&transfer_ref);
        let id = object::address_from_constructor_ref(&constructor_ref);
        let fa_coin_dual_faucet_created = fungible_asset_coin_dual_faucet_create_logic::verify<Y>(
            account,
            &x_amount,
            &y_amount,
            id,
        );
        let (fungible_asset_coin_dual_faucet, faucet_object_address) = fungible_asset_coin_dual_faucet_create_logic::mutate<Y>(
            account,
            &fa_coin_dual_faucet_created,
            x_amount,
            y_amount,
            id,
            &object_signer,
        );
        fungible_asset_coin_dual_faucet::add_fungible_asset_coin_dual_faucet(&object_signer, fungible_asset_coin_dual_faucet);
        fungible_asset_coin_dual_faucet::save_object_controller(&object_signer,
            extend_ref,
            delete_ref,
            transfer_ref,
        );
        fungible_asset_coin_dual_faucet::set_fa_coin_dual_faucet_created_id(&mut fa_coin_dual_faucet_created, id);
        fungible_asset_coin_dual_faucet::emit_fa_coin_dual_faucet_created(fa_coin_dual_faucet_created);
        faucet_object_address
    }

    public fun drop<Y>(
        account: &signer,
        fungible_asset_coin_dual_faucet_obj: Object<FungibleAssetCoinDualFaucet<Y>>,
    ): (FungibleAsset, Coin<Y>) {
        let id = object::object_address(&fungible_asset_coin_dual_faucet_obj);
        let fungible_asset_coin_dual_faucet = fungible_asset_coin_dual_faucet::remove_fungible_asset_coin_dual_faucet(id);
        let fa_coin_dual_faucet_dropped = fungible_asset_coin_dual_faucet_drop_logic::verify<Y>(
            account,
            id,
            &fungible_asset_coin_dual_faucet,
        );
        let (updated_fungible_asset_coin_dual_faucet, drop_return_1, drop_return_2) = fungible_asset_coin_dual_faucet_drop_logic::mutate<Y>(
            account,
            &fa_coin_dual_faucet_dropped,
            id,
            fungible_asset_coin_dual_faucet,
        );
        fungible_asset_coin_dual_faucet::update_version_and_add(id, updated_fungible_asset_coin_dual_faucet);
        fungible_asset_coin_dual_faucet::emit_fa_coin_dual_faucet_dropped(fa_coin_dual_faucet_dropped);
        (drop_return_1, drop_return_2)
    }

}

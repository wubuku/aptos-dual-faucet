// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module dual_faucet::fungible_asset_coin_dual_faucet {
    use aptos_framework::account;
    use aptos_framework::coin::Coin;
    use aptos_framework::event;
    use aptos_framework::fungible_asset::FungibleStore;
    use aptos_framework::object::{Self, Object};
    use dual_faucet::genesis_account;
    use dual_faucet::pass_object;
    use std::option;
    friend dual_faucet::fungible_asset_coin_dual_faucet_aggregate;

    friend dual_faucet::fungible_asset_coin_dual_faucet_accessor;

    const EDataTooLong: u64 = 102;
    const EInappropriateVersion: u64 = 103;
    const ENotInitialized: u64 = 110;

    struct Events has key {
    }

    public fun initialize(account: &signer) {
        genesis_account::assert_genesis_account(account);

        let res_account = genesis_account::resource_account_signer();
        move_to(&res_account, Events {
        });

    }

    #[resource_group_member(group = aptos_framework::object::ObjectGroup)]
    struct FungibleAssetCoinDualFaucet<phantom Y> has key {
        version: u64,
        x_reserve: Object<FungibleStore>,
        y_reserve: Coin<Y>,
    }

    #[resource_group_member(group = aptos_framework::object::ObjectGroup)]
    struct ObjectController has key {
        extend_ref: object::ExtendRef,
        delete_ref: object::DeleteRef,
        transfer_ref: object::TransferRef,
    }


    public(friend) fun save_object_controller(
        object_signer: &signer,
        extend_ref: object::ExtendRef,
        delete_ref: object::DeleteRef,
        transfer_ref: object::TransferRef,
    ) {
        move_to(
            object_signer,
            ObjectController {
                extend_ref,
                delete_ref,
                transfer_ref
            }
        )
    }

    public fun version<Y>(fungible_asset_coin_dual_faucet: &FungibleAssetCoinDualFaucet<Y>): u64 {
        fungible_asset_coin_dual_faucet.version
    }

    public(friend) fun x_reserve<Y>(fungible_asset_coin_dual_faucet: &FungibleAssetCoinDualFaucet<Y>): Object<FungibleStore> {
        fungible_asset_coin_dual_faucet.x_reserve
    }

    public(friend) fun set_x_reserve<Y>(fungible_asset_coin_dual_faucet: &mut FungibleAssetCoinDualFaucet<Y>, x_reserve: Object<FungibleStore>) {
        fungible_asset_coin_dual_faucet.x_reserve = x_reserve;
    }

    public(friend) fun borrow_y_reserve<Y>(fungible_asset_coin_dual_faucet: &FungibleAssetCoinDualFaucet<Y>): &Coin<Y> {
        &fungible_asset_coin_dual_faucet.y_reserve
    }

    public(friend) fun borrow_mut_y_reserve<Y>(fungible_asset_coin_dual_faucet: &mut FungibleAssetCoinDualFaucet<Y>): &mut Coin<Y> {
        &mut fungible_asset_coin_dual_faucet.y_reserve
    }

    public(friend) fun new_fungible_asset_coin_dual_faucet<Y>(
        x_reserve: Object<FungibleStore>,
    ): FungibleAssetCoinDualFaucet<Y> {
        FungibleAssetCoinDualFaucet {
            version: 0,
            x_reserve,
            y_reserve: aptos_framework::coin::zero(),
        }
    }


    public(friend) fun update_version_and_add<Y>(obj_addr: address, fungible_asset_coin_dual_faucet: FungibleAssetCoinDualFaucet<Y>) acquires ObjectController {
        fungible_asset_coin_dual_faucet.version = fungible_asset_coin_dual_faucet.version + 1;
        let extend_ref = &borrow_global<ObjectController>(obj_addr).extend_ref;
        let object_signer = object::generate_signer_for_extending(extend_ref);
        private_add_fungible_asset_coin_dual_faucet(&object_signer, fungible_asset_coin_dual_faucet)
    }

    public(friend) fun add_fungible_asset_coin_dual_faucet<Y>(object_signer: &signer, fungible_asset_coin_dual_faucet: FungibleAssetCoinDualFaucet<Y>) {
        assert!(fungible_asset_coin_dual_faucet.version == 0, EInappropriateVersion);
        private_add_fungible_asset_coin_dual_faucet(object_signer, fungible_asset_coin_dual_faucet);
    }

    public(friend) fun remove_fungible_asset_coin_dual_faucet<Y>(obj_addr: address): FungibleAssetCoinDualFaucet<Y> acquires FungibleAssetCoinDualFaucet {
        move_from<FungibleAssetCoinDualFaucet<Y>>(obj_addr)
    }

    fun private_add_fungible_asset_coin_dual_faucet<Y>(object_signer: &signer, fungible_asset_coin_dual_faucet: FungibleAssetCoinDualFaucet<Y>) {
        move_to(object_signer, fungible_asset_coin_dual_faucet);
    }

    public(friend) fun delete_fungible_asset_coin_dual_faucet(obj_addr: address) acquires ObjectController {
        let ObjectController {
            extend_ref: _extend_ref,
            delete_ref,
            transfer_ref: _transfer_ref,
        } = move_from<ObjectController>(
            obj_addr
        );
        object::delete(delete_ref)
    }

    public(friend) fun transfer_fungible_asset_coin_dual_faucet(obj_addr: address, to: address) acquires ObjectController {
        let transfer_ref = &borrow_global<ObjectController>(obj_addr).transfer_ref;
        let linear_transfer_ref = object::generate_linear_transfer_ref(transfer_ref);
        object::transfer_with_ref(linear_transfer_ref, to)
    }

    public(friend) fun get_fungible_asset_coin_dual_faucet<Y>(obj_addr: address): pass_object::PassObject<FungibleAssetCoinDualFaucet<Y>> acquires FungibleAssetCoinDualFaucet {
        let fungible_asset_coin_dual_faucet = remove_fungible_asset_coin_dual_faucet(obj_addr);
        pass_object::new_with_address(fungible_asset_coin_dual_faucet, obj_addr)
    }

    public(friend) fun return_fungible_asset_coin_dual_faucet<Y>(fungible_asset_coin_dual_faucet_pass_obj: pass_object::PassObject<FungibleAssetCoinDualFaucet<Y>>) acquires ObjectController {
        let (fungible_asset_coin_dual_faucet, obj_addr) = pass_object::extract_value_and_address(fungible_asset_coin_dual_faucet_pass_obj);
        let extend_ref = &borrow_global<ObjectController>(obj_addr).extend_ref;
        let object_signer = object::generate_signer_for_extending(extend_ref);
        private_add_fungible_asset_coin_dual_faucet(&object_signer, fungible_asset_coin_dual_faucet);
    }

    public(friend) fun borrow_mut<Y>(fungible_asset_coin_dual_faucet_pass_obj: &mut pass_object::PassObject<FungibleAssetCoinDualFaucet<Y>>): &mut FungibleAssetCoinDualFaucet<Y> {
        pass_object::borrow_mut(fungible_asset_coin_dual_faucet_pass_obj)
    }

    public(friend) fun object_signer(obj_addr: address): signer acquires ObjectController {
        let extend_ref = &borrow_global<ObjectController>(obj_addr).extend_ref;
        object::generate_signer_for_extending(extend_ref)
    }

    public(friend) fun drop_fungible_asset_coin_dual_faucet<Y>(fungible_asset_coin_dual_faucet: FungibleAssetCoinDualFaucet<Y>) {
        let FungibleAssetCoinDualFaucet {
            version: _version,
            x_reserve: _x_reserve,
            y_reserve,
        } = fungible_asset_coin_dual_faucet;
        aptos_framework::coin::destroy_zero(y_reserve);
    }

}
